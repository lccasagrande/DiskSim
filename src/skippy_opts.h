/* skippy_opts.h */

/* File autogenerated by gengetopt version 2.17  */

#ifndef SKIPPY_OPTS_H
#define SKIPPY_OPTS_H

/* If we use autoconf.  */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#ifndef CMDLINE_PARSER_PACKAGE
#define CMDLINE_PARSER_PACKAGE "disk-extract"
#endif

#ifndef CMDLINE_PARSER_VERSION
#define CMDLINE_PARSER_VERSION "0.1"
#endif

struct gengetopt_args_info
{
  const char *help_help; /* Print help and exit help description.  */
  const char *version_help; /* Print version and exit help description.  */
  char * paramfile_arg;	/* The disksim parameter file to use.  */
  char * paramfile_orig;	/* The disksim parameter file to use original value given at command line.  */
  const char *paramfile_help; /* The disksim parameter file to use help description.  */
  char * outfile_arg;	/* Output file (default='syssim.out').  */
  char * outfile_orig;	/* Output file original value given at command line.  */
  const char *outfile_help; /* Output file help description.  */
  int sectors_arg;	/* Number of sectors (default='2676846').  */
  char * sectors_orig;	/* Number of sectors original value given at command line.  */
  const char *sectors_help; /* Number of sectors help description.  */
  int test_encapsulation_flag;	/* Test encapsulation (default=off).  */
  const char *test_encapsulation_help; /* Test encapsulation help description.  */
  int measurements_arg;	/* Number of measurements to run (default='256').  */
  char * measurements_orig;	/* Number of measurements to run original value given at command line.  */
  const char *measurements_help; /* Number of measurements to run help description.  */
  int sector_size_arg;	/* Size (bytes) of a single sector (default='512').  */
  char * sector_size_orig;	/* Size (bytes) of a single sector original value given at command line.  */
  const char *sector_size_help; /* Size (bytes) of a single sector help description.  */
  int write_flag;	/* Flag to use reads or writes (default=off).  */
  const char *write_help; /* Flag to use reads or writes help description.  */
  
  int help_given ;	/* Whether help was given.  */
  int version_given ;	/* Whether version was given.  */
  int paramfile_given ;	/* Whether paramfile was given.  */
  int outfile_given ;	/* Whether outfile was given.  */
  int sectors_given ;	/* Whether sectors was given.  */
  int test_encapsulation_given ;	/* Whether test-encapsulation was given.  */
  int measurements_given ;	/* Whether measurements was given.  */
  int sector_size_given ;	/* Whether sector-size was given.  */
  int write_given ;	/* Whether write was given.  */

} ;

extern const char *gengetopt_args_info_purpose;
extern const char *gengetopt_args_info_usage;
extern const char *gengetopt_args_info_help[];

int cmdline_parser (int argc, char * const *argv,
  struct gengetopt_args_info *args_info);
int cmdline_parser2 (int argc, char * const *argv,
  struct gengetopt_args_info *args_info,
  int override, int initialize, int check_required);
int cmdline_parser_file_save(const char *filename,
  struct gengetopt_args_info *args_info);

void cmdline_parser_print_help(void);
void cmdline_parser_print_version(void);

void cmdline_parser_init (struct gengetopt_args_info *args_info);
void cmdline_parser_free (struct gengetopt_args_info *args_info);

int cmdline_parser_string (const char *cmdline, struct gengetopt_args_info *args_info,
  const char *prog_name);
int cmdline_parser_string2 (const char *cmdline, struct gengetopt_args_info *args_info,
  const char *prog_name,
  int override, int initialize, int check_required);

int cmdline_parser_required (struct gengetopt_args_info *args_info,
  const char *prog_name);


#ifdef __cplusplus
}
#endif /* __cplusplus */
#endif /* SKIPPY_OPTS_H */
